#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# spark
# https://github.com/holman/spark
#
# Generates sparklines for a set of data.
#
# Here's a a good web-based sparkline generator that was a bit of inspiration
# for spark:
#
#   https://datacollective.org/sparkblocks
#
# spark takes a comma-separated list of data and then prints a sparkline out of
# it.
#
# Examples:
#
#   spark 1,5,22,13,53
#   # => ▁▁▃▂▇
#
#   spark 0,30,55,80,33,150
#   # => ▁▂▃▅▂▇
#
#   spark -h
#   # => Prints the spark help text.

import getopt
import os
import re
import sys


def help():
    """
    Prints the help text for spark.

    Returns nothing.
    """

    print """

  USAGE:
    spark [comma,separated,value,list]

  EXAMPLES:
    spark 1,5,22,13,53
    ▁▁▃▂▇
    spark 0,30,55,80,33,150
    ▁▂▃▅▂▇
"""
    sys.exit(0)


class Data(object):
    """
    Container class which parses the string data from the
    user and caches all relevant values
    """

    def __init__(self, ticks, arg):
        self.ticks = ticks
        self.arg = arg.strip()
        self.split = re.split("[,\s]+", self.arg)
        self.numbers = [float((x.strip())) for x in self.split]
        self.number_of_ticks = len(self.ticks)
        self.setup()

    def setup(self):
        self.sorted = sorted(self.numbers)
        self.max = self.sorted[-1]
        self.min = self.sorted[0]
        if self.min < 0:
            self.numbers = [(x - self.min) for x in self.numbers]
            self.setup()
        else:
            self.range = self.max - self.min
            self.divisor = self.range / (self.number_of_ticks - 1)

    def print_ticks(self):
        """
        Iterate over all of our ticks and print them out.

        Returns nothing.
        """
        for number in self.numbers:
            target = number / self.divisor
            choice = int(target)
            if choice < 0:
                choice = 0
            elif choice >= self.number_of_ticks:
                choice = self.number_of_ticks - 1
            sys.stdout.write(self.ticks[choice].encode("utf-8"))
        print


if __name__ == "__main__":

    # The actual fun characters we are generating in the sparkline.
    ticks = (u"▁", u"▂", u"▃", u"▄", u"▅", u"▆", u"▇", u"█")

    args = sys.argv[1:]

    optlist, args = getopt.getopt(args, ':h', ["chars="])
    for k, v in optlist:
        if k == "-h":
            help()
        elif k == "--chars":
            if not v:
                help()
            elif re.match("\d+", v):
                size = int(v)
                ticks = ["%s " % x for x in range(1, size + 1)]

    # Accept input from $1 or from the pipeline.
    if len(args) > 0:
        data = Data(ticks, args[0])
    else:
        # check to see if stdin's a tty
        if sys.stdin.isatty():
            help()
        data = Data(ticks, sys.stdin.read())

    data.print_ticks()
